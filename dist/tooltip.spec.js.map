{"version":3,"file":"tooltip.spec.js","sourceRoot":"","sources":["../src/tooltip.spec.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAEL,SAAS,EAET,UAAU,EACV,SAAS,EACT,gBAAgB,EACjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,KAAK,EAAoB,OAAO,EAAE,MAAM,uBAAuB,CAAC;AACzE,OAAO,EAAE,uBAAuB,EAAE,MAAM,sCAAsC,CAAC;AAC/E,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAG7C,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAOnD;IAOE,kBAAmB,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAF9C,WAAM,GAAY,KAAK,CAAC;IAEyB,CAAC;IAElD,yCAAsB,GAAtB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;IACnC,CAAC;IAED,6BAAU,GAAV;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,kCAAe,GAAf;QACG,IAAI,CAAC,OAAe,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAC3C,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;IACL,CAAC;IApBiB;QAAjB,SAAS,CAAC,KAAK,CAAC;kCAAS,UAAU;4CAAC;IAEjB;QAAnB,SAAS,CAAC,OAAO,CAAC;kCAAU,OAAO;6CAAC;IAHjC,QAAQ;QALb,SAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,QAAQ,EACN,0FAA0F;SAC7F,CAAC;yCAQ8B,gBAAgB;OAP1C,QAAQ,CAsBb;IAAD,eAAC;CAAA,AAtBD,IAsBC;AAED,QAAQ,CAAC,SAAS,EAAE;IAClB,IAAI,EAAgB,EAClB,IAAc,EACd,OAAmC,EACnC,OAAY,EACZ,aAA+B,CAAC;IAElC,UAAU,CAAC,KAAK,CAAC;QACf,OAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE,CAAC,QAAQ,CAAC;YACxB,OAAO,EAAE;gBACP,WAAW,CAAC,OAAO,EAAE;gBACrB,uBAAuB;gBACvB,cAAc;aACf;SACF,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC;QACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;QAEhD,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC5C,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACjC,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC;QAC1B,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5B,aAAa,GAAG,cAAM,OAAA,OAAO,CAAC,cAAc,CAAC,QAAQ,EAA/B,CAA+B,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,YAAY,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE;QAC9C,OAAO,CAAC,OAAO,EAAE,CAAC;QAClB,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,UAAU,CAAC;YACT,OAAO,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC;QACjD,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE;QAC9C,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;QACxB,OAAO,CAAC,OAAO,EAAE,CAAC;QAClB,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,UAAU,CAAC;YACT,OAAO,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC;QACjD,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE;QACjC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,MAAM,CAAC,aAAa,EAAE,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\r\n  AfterViewInit,\r\n  Component,\r\n  DebugElement,\r\n  ElementRef,\r\n  ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { TooltipBox } from './tooltip-box.component';\r\nimport { Tooltip } from './tooltip.directive';\r\nimport { TooltipsModule } from './tooltips.module';\r\n\r\n@Component({\r\n  selector: 'tooltip-view',\r\n  template:\r\n    '<button #btn tooltip=\"Hello world\" [duration]=\"1000\" [active]=\"active\">Click me</button>'\r\n})\r\nclass TestPage implements AfterViewInit {\r\n  @ViewChild('btn') button: ElementRef;\r\n\r\n  @ViewChild(Tooltip) tooltip: Tooltip;\r\n\r\n  active: boolean = false;\r\n\r\n  constructor(public _viewport: ViewContainerRef) {}\r\n\r\n  getButtonNativeElement(): HTMLButtonElement {\r\n    return this.button.nativeElement;\r\n  }\r\n\r\n  getTooltip(): Tooltip {\r\n    return this.tooltip;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    (this.tooltip as any).appRef.components.push({\r\n      _component: this\r\n    });\r\n  }\r\n}\r\n\r\ndescribe('Tooltip', () => {\r\n  let de: DebugElement,\r\n    comp: TestPage,\r\n    fixture: ComponentFixture<TestPage>,\r\n    tooltip: any,\r\n    getTooltipBox: () => TooltipBox;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [TestPage],\r\n      imports: [\r\n        IonicModule.forRoot(), // to be able to inject Platform\r\n        BrowserAnimationsModule, // needed for TooltipsModule\r\n        TooltipsModule\r\n      ]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    console.log(!!fixture, !!comp, !!de, !!tooltip);\r\n\r\n    fixture = TestBed.createComponent(TestPage);\r\n    fixture.autoDetectChanges(true);\r\n    comp = fixture.componentInstance;\r\n    de = fixture.debugElement;\r\n    tooltip = comp.getTooltip();\r\n    getTooltipBox = () => tooltip.tooltipElement.instance;\r\n  });\r\n\r\n  it('container page should exist', () => {\r\n    expect(comp).toBeDefined();\r\n    expect(comp instanceof TestPage).toBeTruthy();\r\n  });\r\n\r\n  it('should display TooltipBox on click for 1s', () => {\r\n    tooltip.onClick();\r\n    fixture.detectChanges();\r\n    expect(tooltip.tooltipElement).toBeDefined();\r\n    setTimeout(() => {\r\n      fixture.detectChanges();\r\n      expect(tooltip.tooltipElement).toBeUndefined();\r\n    }, 1000);\r\n  });\r\n\r\n  it('should display TooltipBox on press for 1s', () => {\r\n    tooltip.event = 'press';\r\n    tooltip.onPress();\r\n    fixture.detectChanges();\r\n    expect(tooltip.tooltipElement).toBeDefined();\r\n    setTimeout(() => {\r\n      fixture.detectChanges();\r\n      expect(tooltip.tooltipElement).toBeUndefined();\r\n    }, 1000);\r\n  });\r\n\r\n  it('should display TooltipBox when active', () => {\r\n    tooltip.active = true;\r\n    expect(tooltip.tooltipElement).toBeDefined();\r\n    expect(tooltip.active).toBeTruthy();\r\n  });\r\n\r\n  it('should contain \"Hello world\"', () => {\r\n    tooltip.active = true;\r\n    fixture.detectChanges();\r\n    expect(getTooltipBox().getNativeElement().innerText).toEqual('Hello world');\r\n  });\r\n});\r\n"]}