{"version":3,"file":"tooltip-box.component.js","sourceRoot":"","sources":["../src/tooltip-box.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,OAAO,EACP,KAAK,EACL,KAAK,EACL,UAAU,EACV,OAAO,EACR,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAEL,uBAAuB,EACvB,SAAS,EACT,UAAU,EACV,WAAW,EACX,KAAK,EACL,SAAS,EACV,MAAM,eAAe,CAAC;AAuCvB;IAgCE,oBAAmB,UAAsB,EAAU,GAAc;QAAjE,iBAIC;QAJkB,eAAU,GAAV,UAAU,CAAY;QAAU,QAAG,GAAH,GAAG,CAAW;QA/B3C,cAAS,GAAW,WAAW,CAAC;QAgCpD,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAO,UAAA,OAAO;YACnC,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IA9BD,sBAAI,6BAAK;aAAT,UAAU,IAAY;YACpB,IAAI,CAAC,GAAG,CAAC,YAAY,CACnB,IAAI,CAAC,gBAAgB,EAAE,EACvB,OAAO,EACP,YAAY,GAAG,QAAQ,GAAG,IAAI,CAC/B,CAAC;QACJ,CAAC;;;OAAA;IAGD,sBAAI,8BAAM;aAAV,UAAW,GAAW;YACpB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QAChE,CAAC;;;OAAA;IAGD,sBAAI,+BAAO;aAAX,UAAY,GAAW;YACrB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACjE,CAAC;;;OAAA;IAED,qCAAgB,GAAhB;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;IACvC,CAAC;IAYD,oCAAe,GAAf;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAvCqB;QAArB,WAAW,CAAC,OAAO,CAAC;;iDAAiC;IAE7C;QAAR,KAAK,EAAE;;4CAAc;IAGtB;QADC,KAAK,EAAE;;;2CAOP;IAGD;QADC,KAAK,EAAE;;;4CAGP;IAGD;QADC,KAAK,EAAE;;;6CAGP;IAtBU,UAAU;QArCtB,SAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE;gBACV,OAAO,CAAC,MAAM,EAAE;oBACd,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBACvC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBACzC,UAAU,CAAC,uBAAuB,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;iBAC7D,CAAC;aACH;YACD,MAAM,EAAE;gBACN,uNASC;gBACD,mLAQC;gBACD,4FAA4F;gBAC5F,6FAA6F;gBAC7F,8FAA8F;gBAC9F,+FAA+F;aAChG;YACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;yCAiC+B,UAAU,EAAe,SAAS;OAhCtD,UAAU,CAyCtB;IAAD,iBAAC;CAAA,AAzCD,IAyCC;SAzCY,UAAU","sourcesContent":["import {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from '@angular/animations';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'tooltip-box',\r\n  template: '{{ text }}',\r\n  animations: [\r\n    trigger('fade', [\r\n      state('visible', style({ opacity: 1 })),\r\n      state('invisible', style({ opacity: 0 })),\r\n      transition('visible <=> invisible', animate('300ms linear'))\r\n    ])\r\n  ],\r\n  styles: [\r\n    `\r\n      :host {\r\n        background-color: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        display: inline-block;\r\n        position: fixed;\r\n        padding: 15px 25px;\r\n        font-size: 15px;\r\n      }\r\n    `,\r\n    `\r\n      :host.has-arrow:before {\r\n        content: '';\r\n        border: 5px solid transparent;\r\n        position: absolute;\r\n        width: 0;\r\n        height: 0;\r\n      }\r\n    `,\r\n    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',\r\n    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',\r\n    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',\r\n    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }'\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TooltipBox implements AfterViewInit {\r\n  @HostBinding('@fade') fadeState: string = 'invisible';\r\n\r\n  @Input() text: string;\r\n\r\n  @Input()\r\n  set arrow(side: string) {\r\n    this.rnd.setAttribute(\r\n      this.getNativeElement(),\r\n      'class',\r\n      'has-arrow ' + 'arrow-' + side\r\n    );\r\n  }\r\n\r\n  @Input()\r\n  set posTop(val: number) {\r\n    this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');\r\n  }\r\n\r\n  @Input()\r\n  set posLeft(val: number) {\r\n    this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');\r\n  }\r\n\r\n  getNativeElement(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n\r\n  init: Promise<void>;\r\n\r\n  private initResolve: Function;\r\n\r\n  constructor(public elementRef: ElementRef, private rnd: Renderer2) {\r\n    this.init = new Promise<void>(resolve => {\r\n      this.initResolve = resolve;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.initResolve();\r\n  }\r\n}\r\n"]}